schema: '2.0'
stages:
  compile@attack:
    cmd: python -m deckard.layers.compile --report_folder mnist/reports/attack --results_file
      mnist/reports/attack.csv
    deps:
    - path: mnist/reports/attack/
      hash: md5
      md5: a2694f8e9ea5c5ff400d11fa1d98001d.dir
      size: 21895572255
      nfiles: 53006
    - path: mnist/reports/attack/ResNet101.db
      md5: 600452804d96c8b8483c3f8da01130c4
      size: 462848
    - path: mnist/reports/attack/ResNet18.db
      md5: 920b0ed178ec504c0d7990777862283f
      size: 1363968
    - path: mnist/reports/attack/ResNet34.db
      md5: 3f56dd2ea0783a56a2a9e3eaaad88c21
      size: 1945600
    - path: mnist/reports/attack/ResNet50.db
      md5: d9ee221b942b56d9bb720e022e05bf4b
      size: 462848
    outs:
    - path: mnist/reports/attack.csv
      hash: md5
      md5: aa61d0f5118327d164cfc37a466e5162
      size: 47376297
  plot:
    cmd: python -m deckard.layers.plots --path mnist/plots/ --file mnist/reports/clean_attack.csv
      -c conf/plots.yaml
    deps:
    - path: mnist/reports/clean_attack.csv
      hash: md5
      md5: ada4d505a6c72408e50b929b2869ffee
      size: 19747128
    params:
      params.yaml:
        files.directory: mnist
        files.reports: reports
      conf/plots.yaml:
        cat_plot:
        - file: adv_accuracy_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          set:
            yscale: linear
          titles: Adv. Accuracy vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: adv_accuracy
          ylabels: Adv. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: ben_accuracy_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          titles: Ben. Accuracy vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: accuracy
          ylabels: Ben. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: ben_failures_per_train_time_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          set:
            yscale: log
          titles: $\bar{C}_{ben.}$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: training_time_per_failure
          ylabels: $\bar{C}_{ben.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_failures_per_train_time_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          set:
            yscale: log
          titles: $\bar{C}_{adv.}$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: training_time_per_adv_failure
          ylabels: $\bar{C}_{adv.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_failures_per_train_time_vs_attack_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          set:
            yscale: log
          titles: $\bar{C}_{adv.}$ vs Attack Type
          x: atk_gen
          xlabels: Attack Type
          y: training_time_per_adv_failure
          ylabels: $\bar{C}_{adv.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_failures_per_test_time_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          titles: $h_{adv}$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: adv_failure_rate
          ylabels: $h_{adv.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_accuracy_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          titles: Adv. Accuracy vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: adv_accuracy
          ylabels: Adv. Ben. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_accuracy_vs_attack_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          titles: Adv. Accuracy vs Attack Type
          x: atk_gen
          xlabels: Attack Type
          y: adv_accuracy
          ylabels: Adv. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: ben_failure_rate_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          set:
            yscale: log
          titles: $h_{ben}(t; \theta)$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: failure_rate
          ylabels: $h_{ben}(t; \theta)$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        line_plot:
        - file: def_param_vs_accuracy.pdf
          hue: def_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
            title: Defence
          title: Ben. Accuracy vs Defence Strength
          x: def_value
          x_scale: linear
          xlabel: Defence Control Parameter
          y: accuracy
          y_scale:
          ylabel: Ben. Accuracy
        - file: def_param_vs_adv_accuracy.pdf
          hue: def_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
            title: Defence
          title: Adv. Accuracy vs Defence Strength
          x: def_value
          x_scale: linear
          xlabel: Defence Control Parameter
          y: adv_accuracy
          y_scale:
          ylabel: Adv. Accuracy
        - file: def_param_vs_adv_failure_rate.pdf
          hue: def_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
            title: Defence
          title: $h_{adv}$ vs Defence Strength
          x: def_value
          x_scale: linear
          xlabel: Defence Control Parameter
          y: adv_failure_rate
          y_scale: log
          ylabel: $h_{adv.}$
        - file: atk_param_vs_accuracy.pdf
          hue: atk_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
          title: Adv. Accuracy vs Attack Strength
          x: atk_value
          x_scale: linear
          xlabel: Attack Control Parameter
          y: adv_accuracy
          y_scale:
          ylabel: Adv. Accuracy
          hue_order:
          - FGM
          - PGD
          - Deep
          - HSJ
          - Pixel
          - Thresh
        scatter_plot:
        - x: train_time_per_sample
          y: adv_failure_rate
          hue: model_name
          xlabel: $t_{train}$
          ylabel: $h_{adv}$
          title: $h_{adv}$ vs $t_{train}$
          file: adv_failure_rate_vs_train_time.pdf
          y_scale: log
          x_scale: log
          legend:
            title: Model Name
            bbox_to_anchor:
            - 1.05
            - 1
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
    outs:
    - path: mnist/plots/adv_accuracy_vs_attack_type.pdf
      hash: md5
      md5: 175188b326b4c519d51274f461fe4b56
      size: 32685
    - path: mnist/plots/adv_accuracy_vs_defence_type.pdf
      hash: md5
      md5: 65201d5844ae16efa9e675d3622c6c6d
      size: 33020
    - path: mnist/plots/adv_failure_rate_vs_train_time.pdf
      hash: md5
      md5: ee56e84db4091efa7b1526ec51fdfdd5
      size: 96055
    - path: mnist/plots/adv_failures_per_test_time_vs_defence_type.pdf
      hash: md5
      md5: bdd64c58fc2cfdc344ec81a0642be597
      size: 40000
    - path: mnist/plots/adv_failures_per_train_time_vs_attack_type.pdf
      hash: md5
      md5: 1216c3aa5898e874f430c7734b26ea56
      size: 41252
    - path: mnist/plots/adv_failures_per_train_time_vs_defence_type.pdf
      hash: md5
      md5: 8f04fa98643a1210910ef8657df1c2fa
      size: 37353
    - path: mnist/plots/atk_param_vs_accuracy.pdf
      hash: md5
      md5: 66c481c894939696b9f217570790fcec
      size: 20223
    - path: mnist/plots/ben_accuracy_vs_defence_type.pdf
      hash: md5
      md5: ff6f4bb8bde362750bf5878eea7e13ff
      size: 30124
    - path: mnist/plots/ben_failure_rate_vs_defence_type.pdf
      hash: md5
      md5: 983850e56fcd0ad50d85e630d61c82a5
      size: 42600
    - path: mnist/plots/ben_failures_per_train_time_vs_defence_type.pdf
      hash: md5
      md5: e62b68ef46db339eb9def2f4959be2b3
      size: 37589
    - path: mnist/plots/def_param_vs_accuracy.pdf
      hash: md5
      md5: e1b0f111bc5d7797256be82187586023
      size: 20548
    - path: mnist/plots/def_param_vs_adv_accuracy.pdf
      hash: md5
      md5: 310f01fdaa47a92500f03d728cd6b117
      size: 19862
    - path: mnist/plots/def_param_vs_adv_failure_rate.pdf
      hash: md5
      md5: d376c93f824251f3508b0a7e3c365020
      size: 23632
  afr:
    cmd: python -m deckard.layers.afr --dataset mnist --data_file mnist/reports/clean_attack.csv  --duration_col
      adv_fit_time --dataset mnist --config_file conf/afr.yaml --plots_folder mnist/plots/
    deps:
    - path: mnist/plots/adv_accuracy_vs_defence_type.pdf
      hash: md5
      md5: 65201d5844ae16efa9e675d3622c6c6d
      size: 33020
    - path: mnist/reports/clean_attack.csv
      hash: md5
      md5: ada4d505a6c72408e50b929b2869ffee
      size: 19747128
    params:
      params.yaml:
        files.directory: mnist
      conf/afr.yaml:
        covariates:
        - accuracy
        - train_time
        - predict_time
        - atk_value
        - def_value
        - data.sample.random_state
        - adv_failure_rate
        - model_layers
        - adv_fit_time
        - model.trainer.nb_epoch
        log_logistic:
          plot:
            file: log_logistic_aft.pdf
            title: Log logistic AFR Model
          labels:
            'Intercept: rho_': $\rho$
            'Intercept: lambda_': $\lambda$
            'data.sample.random_state: lambda_': Random State
            'atk_value: lambda_': Attack Strength
            'train_time: lambda_': $t_{train}$
            'predict_proba_time: lambda_': $t_{predict}$
            'adv_accuracy: lambda_': Adv. Accuracy
            'accuracy: lambda_': Ben. Accuracy
            'adv_fit_time: lambda_': $t_{attack}$
            'adv_failure_rate: lambda_': $h_{adv.}(t;\theta)$
            'failure_rate: lambda_': $h_{ben.}(t;\theta)$
            'model.trainer.nb_epoch: lambda_': No. of Epochs
            'model.trainer.batch_size: lambda_': Batch Size
            def_gen: Defence
          partial_effect:
          - file: log_logistic_epochs_partial_effect.pdf
            covariate_array: model.trainer.nb_epoch
            values_array:
            - 1
            - 10
            - 25
            - 50
            title: $S(t)$ for Log-Logistic AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: Epochs
              labels:
              - '1'
              - '10'
              - '25'
              - '50'
          - file: log_logistic_layers_partial_effect.pdf
            covariate_array: model_layers
            values_array:
            - 18
            - 34
            - 50
            - 101
            - 152
            title: $S(t)$ for Cox AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: ResNet Layers
              labels:
              - '18'
              - '34'
              - '50'
              - '101'
              - '152'
        log_normal:
          plot:
            file: log_normal_aft.pdf
            title: Log Normal AFR Model
          labels:
            'Intercept: rho_': $\rho$
            'Intercept: lambda_': $\lambda$
            'data.sample.random_state: lambda_': Random State
            'atk_value: lambda_': Attack Strength
            'train_time: lambda_': $t_{train}$
            'predict_proba_time: lambda_': $t_{predict}$
            'adv_accuracy: lambda_': Adv. Accuracy
            'accuracy: lambda_': Ben. Accuracy
            'adv_fit_time: lambda_': $t_{attack}$
            'adv_failure_rate: lambda_': $h_{adv.}(t;\theta)$
            'failure_rate: lambda_': $h_{ben.}(t;\theta)$
            'model.trainer.nb_epoch: lambda_': No. of Epochs
            'model.trainer.batch_size: lambda_': Batch Size
            def_gen: Defence
          partial_effect:
          - file: log_normal_epochs_partial_effect.pdf
            covariate_array: model.trainer.nb_epoch
            values_array:
            - 1
            - 10
            - 25
            - 50
            title: $S(t)$ for Log-Normal AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: Epochs
              labels:
              - '1'
              - '10'
              - '25'
              - '50'
          - file: log_normal_layers_partial_effect.pdf
            covariate_array: model_layers
            values_array:
            - 18
            - 34
            - 50
            - 101
            - 152
            title: $S(t)$ for Cox AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: ResNet Layers
              labels:
              - '18'
              - '34'
              - '50'
              - '101'
              - '152'
        weibull:
          plot:
            file: weibull_aft.pdf
            title: Weibull AFR Model
          labels:
            'Intercept: rho_': $\rho$
            'Intercept: lambda_': $\lambda$
            'data.sample.random_state: lambda_': Random State
            'atk_value: lambda_': Attack Strength
            'train_time: lambda_': $t_{train}$
            'predict_proba_time: lambda_': $t_{predict}$
            'adv_accuracy: lambda_': Adv. Accuracy
            'accuracy: lambda_': Ben. Accuracy
            'adv_fit_time: lambda_': $t_{attack}$
            'adv_failure_rate: lambda_': $h_{adv.}(t;\theta)$
            'failure_rate: lambda_': $h_{ben.}(t;\theta)$
            'model.trainer.nb_epoch: lambda_': No. of Epochs
            'model.trainer.batch_size: lambda_': Batch Size
            def_gen: Defence
          partial_effect:
          - file: weibull_epochs_partial_effect.pdf
            covariate_array: model.trainer.nb_epoch
            values_array:
            - 1
            - 10
            - 25
            - 50
            title: $S(t)$ for Weibull AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: Epochs
              labels:
              - '1'
              - '10'
              - '25'
              - '50'
          - file: weibull_layers_partial_effect.pdf
            covariate_array: model_layers
            values_array:
            - 18
            - 34
            - 50
            - 101
            - 152
            title: $S(t)$ for Cox AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: ResNet Layers
              labels:
              - '18'
              - '34'
              - '50'
              - '101'
              - '152'
    outs:
    - path: mnist/plots/aft_comparison.csv
      hash: md5
      md5: a35241fbedbd3900b42424e4036f1cdb
      size: 183
    - path: mnist/plots/aft_comparison.tex
      hash: md5
      md5: c0d2c64f3b2696750aa5de1539312379
      size: 407
    - path: mnist/plots/log_logistic_aft.pdf
      hash: md5
      md5: 03f05b16a9504eea7e81652b31de0d00
      size: 23401
    - path: mnist/plots/log_logistic_epochs_partial_effect.pdf
      hash: md5
      md5: 535a9ea4255b7577cb300efbd1d256df
      size: 27394
    - path: mnist/plots/log_logistic_layers_partial_effect.pdf
      hash: md5
      md5: 2a4ab1809b665e226617185e475fb76b
      size: 28988
    - path: mnist/plots/log_normal_aft.pdf
      hash: md5
      md5: 007fd6530b124cb76995f2d11ccea52f
      size: 24471
    - path: mnist/plots/log_normal_epochs_partial_effect.pdf
      hash: md5
      md5: 29293af9fa83d8c9a6ca3680183c53c5
      size: 28043
    - path: mnist/plots/log_normal_layers_partial_effect.pdf
      hash: md5
      md5: 1848f13abd7b100cb455de45f4fd13fd
      size: 29095
    - path: mnist/plots/weibull_aft.pdf
      hash: md5
      md5: 0e5d3b23fa0607678359c96c978c0952
      size: 33691
    - path: mnist/plots/weibull_epochs_partial_effect.pdf
      hash: md5
      md5: c48ae038ac53ec5844f72eda45812146
      size: 27547
    - path: mnist/plots/weibull_layers_partial_effect.pdf
      hash: md5
      md5: e7c2e1ec85fdb54e59bfbe55a9065c5a
      size: 29116
  copy_results:
    cmd: cp -r mnist/plots/* ~/ml_afr/mnist/
    deps:
    - path: mnist/plots/
      hash: md5
      md5: 7baeb7db4aacc8c9e9676f7d04713294.dir
      size: 727279
      nfiles: 24
  clean@attack:
    cmd: python -m deckard.layers.clean_data -i mnist/reports/attack.csv -o mnist/reports/clean_attack.csv
      -c conf/clean.yaml
    deps:
    - path: mnist/reports/attack.csv
      hash: md5
      md5: aa61d0f5118327d164cfc37a466e5162
      size: 47376297
    params:
      params.yaml:
        files.directory: mnist
        files.reports: reports
      conf/clean.yaml:
        attacks:
          DeepFool: Deep
          FastGradientMethod: FGM
          HopSkipJump: HSJ
          PixelAttack: Pixel
          ProjectedGradientDescent: PGD
          ThresholdAttack: Thresh
        defences:
          Control: Control
          FeatureSqueezing: FSQ
          GaussianAugmentation: Gauss-in
          GaussianNoise: Gauss-out
          HighConfidence: Conf
          nb_epoch: Epochs
          model_layers: Control
        fillna:
          Epochs: 20
        params:
          Deep: attack.init.kwargs.nb_grads
          FGM: attack.init.kwargs.eps
          HSJ: attack.init.kwargs.max_iter
          Pixel: attack.init.kwargs.th
          PGD: attack.init.kwargs.eps
          Thresh: attack.init.kwargs.th
          Gauss-out: model.art.pipeline.postprocessor.kwargs.scale
          Conf: model.art.pipeline.postprocessor.kwargs.cutoff
          FSQ: model.art.pipeline.preprocessor.kwargs.bit_depth
          Gauss-in: model.art.pipeline.preprocessor.kwargs.sigma
          Control: model_layers
          Epochs: model.trainer.nb_epoch
    outs:
    - path: mnist/reports/clean_attack.csv
      hash: md5
      md5: ada4d505a6c72408e50b929b2869ffee
      size: 19747128
  train:
    cmd: python -m deckard.layers.experiment train --config_file mnist.yaml
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            _target_: deckard.base.data.generator.DataGenerator
            name: torch_mnist
          sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state: 0
            stratify: true
          sklearn_pipeline:
            _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          data_dir: data
          data_file: data
          data_type: .pkl
          directory: mnist
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
              sklearn_pipeline:
                _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
            sklearn_pipeline:
              _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 1
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epoch: 100
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: mnist/data/data.pkl
      hash: md5
      md5: de934a5f5157970e5f30b8f3f1856a68
      size: 222320311
    - path: mnist/models/model.optimizer.pt
      hash: md5
      md5: 1e527d70896a4a05a2d6ac103382cd50
      size: 44780845
    - path: mnist/models/model.pt
      hash: md5
      md5: f01e051c7b7dfa20eca3fe1caab0b25e
      size: 44785941
    - path: mnist/reports/train/default/predictions.json
      hash: md5
      md5: 1e2cf0100bb5f0a42182021e12b00dd9
      size: 2882749
    - path: mnist/reports/train/default/score_dict.json
      hash: md5
      md5: ebe552d99842320709ca466da6d3092c
      size: 410
