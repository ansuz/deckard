schema: '2.0'
stages:
  train:
    cmd: python -m deckard.layers.experiment train --config_file cifar10.yaml
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: torch_cifar10
          sample:
            random_state: 0
            stratify: true
          sklearn_pipeline:
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          data_dir: data
          data_file: data
          data_type: .pkl
          directory: cifar
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            data:
              _target_: deckard.base.data.Data
              generate:
                name: torch_cifar10
              sample:
                random_state: 0
                stratify: true
              sklearn_pipeline:
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            initialize:
              clip_values:
              - 0.0
              - 255.0
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
          data:
            _target_: deckard.base.data.Data
            generate:
              name: torch_cifar10
            sample:
              random_state: 0
              stratify: true
            sklearn_pipeline:
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 3
            num_classes: 10
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epoch: 100
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: cifar/data/data.pkl
      md5: 6503fed5d4e6cc1163898c0ab6a863dd
      size: 739680311
    - path: cifar/models/model.optimizer.pt
      hash: md5
      md5: d46598fb7feec074c02bd0ed081184da
      size: 44805933
    - path: cifar/models/model.pt
      hash: md5
      md5: f5d11f93160ad27b8468efc0d71eb695
      size: 44811029
    - path: cifar/reports/train/default/predictions.json
      hash: md5
      md5: 37f581850d9f6d491cb0d9025e620bf9
      size: 2439094
    - path: cifar/reports/train/default/score_dict.json
      hash: md5
      md5: 055f95d856bc09b533eccb57314db0c4
      size: 397
  attack:
    cmd: python -m deckard.layers.experiment attack --config_file cifar10.yaml
    deps:
    - path: cifar/data/data.pkl
      hash: md5
      md5: 6503fed5d4e6cc1163898c0ab6a863dd
      size: 739680311
    - path: cifar/models/model.pt
      hash: md5
      md5: f5d11f93160ad27b8468efc0d71eb695
      size: 44811029
    params:
      params.yaml:
        attack:
          _target_: deckard.base.attack.Attack
          attack_size: 10
          data:
            _target_: deckard.base.data.Data
            generate:
              name: torch_cifar10
            sample:
              random_state: 0
              stratify: true
            sklearn_pipeline:
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.attack.AttackInitializer
            model:
              _target_: deckard.base.model.Model
              art:
                _target_: deckard.base.model.art_pipeline.ArtPipeline
                data:
                  _target_: deckard.base.data.Data
                  generate:
                    name: torch_cifar10
                  sample:
                    random_state: 0
                    stratify: true
                  sklearn_pipeline:
                    preprocessor:
                      name: sklearn.preprocessing.StandardScaler
                      with_mean: true
                      with_std: true
                initialize:
                  clip_values:
                  - 0.0
                  - 255.0
                  criterion:
                    name: torch.nn.CrossEntropyLoss
                  optimizer:
                    lr: 0.01
                    momentum: 0.9
                    name: torch.optim.SGD
                library: pytorch
              data:
                _target_: deckard.base.data.Data
                generate:
                  name: torch_cifar10
                sample:
                  random_state: 0
                  stratify: true
                sklearn_pipeline:
                  preprocessor:
                    name: sklearn.preprocessing.StandardScaler
                    with_mean: true
                    with_std: true
              init:
                _target_: deckard.base.model.ModelInitializer
                name: torch_example.ResNet18
                num_channels: 3
                num_classes: 10
              library: pytorch
              trainer:
                batch_size: 1024
                nb_epoch: 100
            name: art.attacks.evasion.HopSkipJump
          method: evasion
          model:
            _target_: deckard.base.model.Model
            art:
              _target_: deckard.base.model.art_pipeline.ArtPipeline
              data:
                _target_: deckard.base.data.Data
                generate:
                  name: torch_cifar10
                sample:
                  random_state: 0
                  stratify: true
                sklearn_pipeline:
                  preprocessor:
                    name: sklearn.preprocessing.StandardScaler
                    with_mean: true
                    with_std: true
              initialize:
                clip_values:
                - 0.0
                - 255.0
                criterion:
                  name: torch.nn.CrossEntropyLoss
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              library: pytorch
            data:
              _target_: deckard.base.data.Data
              generate:
                name: torch_cifar10
              sample:
                random_state: 0
                stratify: true
              sklearn_pipeline:
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            init:
              _target_: deckard.base.model.ModelInitializer
              name: torch_example.ResNet18
              num_channels: 3
              num_classes: 10
            library: pytorch
            trainer:
              batch_size: 1024
              nb_epoch: 100
        data:
          _target_: deckard.base.data.Data
          generate:
            name: torch_cifar10
          sample:
            random_state: 0
            stratify: true
          sklearn_pipeline:
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          data_dir: data
          data_file: data
          data_type: .pkl
          directory: cifar
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            data:
              _target_: deckard.base.data.Data
              generate:
                name: torch_cifar10
              sample:
                random_state: 0
                stratify: true
              sklearn_pipeline:
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            initialize:
              clip_values:
              - 0.0
              - 255.0
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
          data:
            _target_: deckard.base.data.Data
            generate:
              name: torch_cifar10
            sample:
              random_state: 0
              stratify: true
            sklearn_pipeline:
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 3
            num_classes: 10
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epoch: 100
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: cifar/attacks/attack.pkl
      hash: md5
      md5: 4c6d7b56c319a2a3a8f4288873141a44
      size: 123046
    - path: cifar/reports/attack/default/adv_predictions.json
      hash: md5
      md5: 0e905b6a95defafe1472cd1d329ed124
      size: 2136
    - path: cifar/reports/attack/default/score_dict.json
      hash: md5
      md5: f40b5d8125bf8b6370a94fe65d43cffa
      size: 458
  attacks@ResNet101:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet101
      stage=attack ++hydra.sweeper.storage=sqlite:///cifar/reports/attack/ResNet101.db
      --config-name cifar10.yaml
    deps:
    - path: attacks.sh
      hash: md5
      md5: 963c858a322d7a4990a92a25d5684c57
      size: 2907
    - path: cifar/reports/attack/default/score_dict.json
      hash: md5
      md5: f40b5d8125bf8b6370a94fe65d43cffa
      size: 458
    - path: models.sh
      hash: md5
      md5: 02a4961b4afe7ba84c41e9ad49c30c83
      size: 2760
    outs:
    - path: cifar/reports/attack/ResNet101.db
      hash: md5
      md5: 268500e55100c8e2c0de628e8b66b612
      size: 819200
  attacks@ResNet152:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet152
      stage=attack ++hydra.sweeper.storage=sqlite:///cifar/reports/attack/ResNet152.db
      --config-name cifar10.yaml
    deps:
    - path: attacks.sh
      hash: md5
      md5: 963c858a322d7a4990a92a25d5684c57
      size: 2907
    - path: cifar/reports/attack/default/score_dict.json
      hash: md5
      md5: f40b5d8125bf8b6370a94fe65d43cffa
      size: 458
    - path: models.sh
      hash: md5
      md5: 02a4961b4afe7ba84c41e9ad49c30c83
      size: 2760
    outs:
    - path: cifar/reports/attack/ResNet152.db
      hash: md5
      md5: 47684cf7d10b05f6343f58579fd05af3
      size: 249856
  attacks@ResNet18:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet18
      stage=attack ++hydra.sweeper.storage=sqlite:///cifar/reports/attack/ResNet18.db
      --config-name cifar10.yaml
    deps:
    - path: attacks.sh
      hash: md5
      md5: 963c858a322d7a4990a92a25d5684c57
      size: 2907
    - path: cifar/reports/attack/default/score_dict.json
      hash: md5
      md5: f40b5d8125bf8b6370a94fe65d43cffa
      size: 458
    - path: models.sh
      hash: md5
      md5: 02a4961b4afe7ba84c41e9ad49c30c83
      size: 2760
    outs:
    - path: cifar/reports/attack/ResNet18.db
      hash: md5
      md5: bf2b93a31c49e96b219c23095504a7f1
      size: 819200
  attacks@ResNet34:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet34
      stage=attack ++hydra.sweeper.storage=sqlite:///cifar/reports/attack/ResNet34.db
      --config-name cifar10.yaml
    deps:
    - path: attacks.sh
      hash: md5
      md5: 963c858a322d7a4990a92a25d5684c57
      size: 2907
    - path: cifar/reports/attack/default/score_dict.json
      hash: md5
      md5: f40b5d8125bf8b6370a94fe65d43cffa
      size: 458
    - path: models.sh
      hash: md5
      md5: 02a4961b4afe7ba84c41e9ad49c30c83
      size: 2760
    outs:
    - path: cifar/reports/attack/ResNet34.db
      hash: md5
      md5: 8de8f4dfcda52bb40f206cf3c4977dd5
      size: 819200
  attacks@ResNet50:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet50
      stage=attack ++hydra.sweeper.storage=sqlite:///cifar/reports/attack/ResNet50.db
      --config-name cifar10.yaml
    deps:
    - path: attacks.sh
      hash: md5
      md5: 963c858a322d7a4990a92a25d5684c57
      size: 2907
    - path: cifar/reports/attack/default/score_dict.json
      hash: md5
      md5: f40b5d8125bf8b6370a94fe65d43cffa
      size: 458
    - path: models.sh
      hash: md5
      md5: 02a4961b4afe7ba84c41e9ad49c30c83
      size: 2760
    outs:
    - path: cifar/reports/attack/ResNet50.db
      hash: md5
      md5: 8adabcf8a15b13fc20ea31f58ae7388b
      size: 1069056
  compile@attack:
    cmd: python -m deckard.layers.compile --report_folder cifar/reports/attack --results_file
      cifar/reports/attack.csv
    deps:
    - path: cifar/reports/attack/
      hash: md5
      md5: 8c7a44700932e363fa7482224eac15bb.dir
      size: 9973372888
      nfiles: 34873
    - path: cifar/reports/attack/ResNet101.db
      hash: md5
      md5: 268500e55100c8e2c0de628e8b66b612
      size: 819200
    - path: cifar/reports/attack/ResNet18.db
      hash: md5
      md5: bf2b93a31c49e96b219c23095504a7f1
      size: 819200
    - path: cifar/reports/attack/ResNet34.db
      hash: md5
      md5: 8de8f4dfcda52bb40f206cf3c4977dd5
      size: 819200
    - path: cifar/reports/attack/ResNet50.db
      hash: md5
      md5: 8adabcf8a15b13fc20ea31f58ae7388b
      size: 1069056
    outs:
    - path: cifar/reports/attack.csv
      hash: md5
      md5: 51d3b7360885430ef15c78e66a85393a
      size: 26068128
  plot:
    cmd: python -m deckard.layers.plots --path cifar/plots/ --file cifar/reports/clean_attack.csv
      -c conf/plots.yaml
    deps:
    - path: cifar/reports/clean_attack.csv
      hash: md5
      md5: 726a596355273abf4a5172268bf69c62
      size: 14801171
    params:
      params.yaml:
        files.directory: cifar
        files.reports: reports
      conf/plots.yaml:
        cat_plot:
        - file: adv_accuracy_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          set:
            yscale: linear
          titles: Adv. Accuracy vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: adv_accuracy
          ylabels: Adv. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: ben_accuracy_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          titles: Ben. Accuracy vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: accuracy
          ylabels: Ben. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: ben_failures_per_train_time_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          set:
            yscale: log
          titles: $\bar{C}_{ben.}$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: training_time_per_failure
          ylabels: $\bar{C}_{ben.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_failures_per_train_time_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          set:
            yscale: log
          titles: $\bar{C}_{adv.}$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: training_time_per_adv_failure
          ylabels: $\bar{C}_{adv.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_failures_per_train_time_vs_attack_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          set:
            yscale: log
          titles: $\bar{C}_{adv.}$ vs Attack Type
          x: atk_gen
          xlabels: Attack Type
          y: training_time_per_adv_failure
          ylabels: $\bar{C}_{adv.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_failures_per_test_time_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          titles: $h_{adv}$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: adv_failure_rate
          ylabels: $h_{adv.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_accuracy_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          titles: Adv. Accuracy vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: adv_accuracy
          ylabels: Adv. Ben. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_accuracy_vs_attack_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          titles: Adv. Accuracy vs Attack Type
          x: atk_gen
          xlabels: Attack Type
          y: adv_accuracy
          ylabels: Adv. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: ben_failure_rate_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          set:
            yscale: log
          titles: $h_{ben}(t; \theta)$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: failure_rate
          ylabels: $h_{ben}(t; \theta)$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        line_plot:
        - file: def_param_vs_accuracy.pdf
          hue: def_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
            title: Defence
          title: Ben. Accuracy vs Defence Strength
          x: def_value
          x_scale: linear
          xlabel: Defence Control Parameter
          y: accuracy
          y_scale:
          ylabel: Ben. Accuracy
        - file: def_param_vs_adv_accuracy.pdf
          hue: def_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
            title: Defence
          title: Adv. Accuracy vs Defence Strength
          x: def_value
          x_scale: linear
          xlabel: Defence Control Parameter
          y: adv_accuracy
          y_scale:
          ylabel: Adv. Accuracy
        - file: def_param_vs_adv_failure_rate.pdf
          hue: def_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
            title: Defence
          title: $h_{adv}$ vs Defence Strength
          x: def_value
          x_scale: linear
          xlabel: Defence Control Parameter
          y: adv_failure_rate
          y_scale: log
          ylabel: $h_{adv.}$
        - file: atk_param_vs_accuracy.pdf
          hue: atk_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
          title: Adv. Accuracy vs Attack Strength
          x: atk_value
          x_scale: linear
          xlabel: Attack Control Parameter
          y: adv_accuracy
          y_scale:
          ylabel: Adv. Accuracy
          hue_order:
          - FGM
          - PGD
          - Deep
          - HSJ
          - Pixel
          - Thresh
        scatter_plot:
        - x: train_time_per_sample
          y: adv_failure_rate
          hue: model_name
          xlabel: $t_{train}$
          ylabel: $h_{adv}$
          title: $h_{adv}$ vs $t_{train}$
          file: adv_failure_rate_vs_train_time.pdf
          y_scale: log
          x_scale: log
          legend:
            title: Model Name
            bbox_to_anchor:
            - 1.05
            - 1
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
    outs:
    - path: cifar/plots/adv_accuracy_vs_attack_type.pdf
      hash: md5
      md5: fa4182dde5c8518f850b3f544f6f4b47
      size: 32194
    - path: cifar/plots/adv_accuracy_vs_defence_type.pdf
      hash: md5
      md5: 4ae5eccdd5676f9c419d3bafa51ee64f
      size: 32506
    - path: cifar/plots/adv_failure_rate_vs_train_time.pdf
      hash: md5
      md5: 022ae441bf1634fa65d4a394a1242c0b
      size: 80138
    - path: cifar/plots/adv_failures_per_test_time_vs_defence_type.pdf
      hash: md5
      md5: 116aaae2a165fa2da6b40e75ad08f791
      size: 39583
    - path: cifar/plots/adv_failures_per_train_time_vs_attack_type.pdf
      hash: md5
      md5: 577552540e5524b5d19ff69cea1d3196
      size: 40766
    - path: cifar/plots/adv_failures_per_train_time_vs_defence_type.pdf
      hash: md5
      md5: 46f082107803063cee8c154e9b70c38b
      size: 36881
    - path: cifar/plots/atk_param_vs_accuracy.pdf
      hash: md5
      md5: 9d8dd906f5d0062a532ef746eaa2977c
      size: 20726
    - path: cifar/plots/ben_accuracy_vs_defence_type.pdf
      hash: md5
      md5: bad8148d0901bdf58ae0063fc6381f61
      size: 29771
    - path: cifar/plots/ben_failure_rate_vs_defence_type.pdf
      hash: md5
      md5: 9365a16310decc28e2b13664a15adf08
      size: 41749
    - path: cifar/plots/ben_failures_per_train_time_vs_defence_type.pdf
      hash: md5
      md5: b676d6aa31996fd9dbd74c7493cd9e3f
      size: 36648
    - path: cifar/plots/def_param_vs_accuracy.pdf
      hash: md5
      md5: 0d0c6bc3384ca384eeebab6cdbb66f85
      size: 19715
    - path: cifar/plots/def_param_vs_adv_accuracy.pdf
      hash: md5
      md5: 53997d0a283fe5ad4c8a807647fb1863
      size: 19967
    - path: cifar/plots/def_param_vs_adv_failure_rate.pdf
      hash: md5
      md5: 99bf0b1596f58908be2aaa59fae6ed2b
      size: 23544
  afr:
    cmd: python -m deckard.layers.afr --dataset cifar --data_file cifar/reports/clean_attack.csv  --duration_col
      adv_fit_time --dataset mnist --config_file conf/afr.yaml --plots_folder cifar/plots/
    deps:
    - path: cifar/plots/adv_accuracy_vs_defence_type.pdf
      hash: md5
      md5: 4ae5eccdd5676f9c419d3bafa51ee64f
      size: 32506
    - path: cifar/reports/clean_attack.csv
      hash: md5
      md5: 726a596355273abf4a5172268bf69c62
      size: 14801171
    params:
      params.yaml:
        files.directory: cifar
      conf/afr.yaml:
        covariates:
        - accuracy
        - train_time
        - predict_time
        - atk_value
        - def_value
        - data.sample.random_state
        - adv_failure_rate
        - model_layers
        - adv_fit_time
        - model.trainer.nb_epoch
        log_logistic:
          plot:
            file: log_logistic_aft.pdf
            title: Log logistic AFR Model
          labels:
            'Intercept: rho_': $\rho$
            'Intercept: lambda_': $\lambda$
            'data.sample.random_state: lambda_': Random State
            'atk_value: lambda_': Attack Strength
            'train_time: lambda_': $t_{train}$
            'predict_proba_time: lambda_': $t_{predict}$
            'adv_accuracy: lambda_': Adv. Accuracy
            'accuracy: lambda_': Ben. Accuracy
            'adv_fit_time: lambda_': $t_{attack}$
            'adv_failure_rate: lambda_': $h_{adv.}(t;\theta)$
            'failure_rate: lambda_': $h_{ben.}(t;\theta)$
            'model.trainer.nb_epoch: lambda_': No. of Epochs
            'model.trainer.batch_size: lambda_': Batch Size
            def_gen: Defence
          partial_effect:
          - file: log_logistic_epochs_partial_effect.pdf
            covariate_array: model.trainer.nb_epoch
            values_array:
            - 1
            - 10
            - 25
            - 50
            title: $S(t)$ for Log-Logistic AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: Epochs
              labels:
              - '1'
              - '10'
              - '25'
              - '50'
          - file: log_logistic_layers_partial_effect.pdf
            covariate_array: model_layers
            values_array:
            - 18
            - 34
            - 50
            - 101
            - 152
            title: $S(t)$ for Cox AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: ResNet Layers
              labels:
              - '18'
              - '34'
              - '50'
              - '101'
              - '152'
        log_normal:
          plot:
            file: log_normal_aft.pdf
            title: Log Normal AFR Model
          labels:
            'Intercept: rho_': $\rho$
            'Intercept: lambda_': $\lambda$
            'data.sample.random_state: lambda_': Random State
            'atk_value: lambda_': Attack Strength
            'train_time: lambda_': $t_{train}$
            'predict_proba_time: lambda_': $t_{predict}$
            'adv_accuracy: lambda_': Adv. Accuracy
            'accuracy: lambda_': Ben. Accuracy
            'adv_fit_time: lambda_': $t_{attack}$
            'adv_failure_rate: lambda_': $h_{adv.}(t;\theta)$
            'failure_rate: lambda_': $h_{ben.}(t;\theta)$
            'model.trainer.nb_epoch: lambda_': No. of Epochs
            'model.trainer.batch_size: lambda_': Batch Size
            def_gen: Defence
          partial_effect:
          - file: log_normal_epochs_partial_effect.pdf
            covariate_array: model.trainer.nb_epoch
            values_array:
            - 1
            - 10
            - 25
            - 50
            title: $S(t)$ for Log-Normal AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: Epochs
              labels:
              - '1'
              - '10'
              - '25'
              - '50'
          - file: log_normal_layers_partial_effect.pdf
            covariate_array: model_layers
            values_array:
            - 18
            - 34
            - 50
            - 101
            - 152
            title: $S(t)$ for Cox AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: ResNet Layers
              labels:
              - '18'
              - '34'
              - '50'
              - '101'
              - '152'
        weibull:
          plot:
            file: weibull_aft.pdf
            title: Weibull AFR Model
          labels:
            'Intercept: rho_': $\rho$
            'Intercept: lambda_': $\lambda$
            'data.sample.random_state: lambda_': Random State
            'atk_value: lambda_': Attack Strength
            'train_time: lambda_': $t_{train}$
            'predict_proba_time: lambda_': $t_{predict}$
            'adv_accuracy: lambda_': Adv. Accuracy
            'accuracy: lambda_': Ben. Accuracy
            'adv_fit_time: lambda_': $t_{attack}$
            'adv_failure_rate: lambda_': $h_{adv.}(t;\theta)$
            'failure_rate: lambda_': $h_{ben.}(t;\theta)$
            'model.trainer.nb_epoch: lambda_': No. of Epochs
            'model.trainer.batch_size: lambda_': Batch Size
            def_gen: Defence
          partial_effect:
          - file: weibull_epochs_partial_effect.pdf
            covariate_array: model.trainer.nb_epoch
            values_array:
            - 1
            - 10
            - 25
            - 50
            title: $S(t)$ for Weibull AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: Epochs
              labels:
              - '1'
              - '10'
              - '25'
              - '50'
          - file: weibull_layers_partial_effect.pdf
            covariate_array: model_layers
            values_array:
            - 18
            - 34
            - 50
            - 101
            - 152
            title: $S(t)$ for Cox AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: ResNet Layers
              labels:
              - '18'
              - '34'
              - '50'
              - '101'
              - '152'
    outs:
    - path: cifar/plots/log_logistic_aft.pdf
      hash: md5
      md5: 66fd4b6d8efa8303e069f509b439766a
      size: 23397
    - path: cifar/plots/log_logistic_epochs_partial_effect.pdf
      hash: md5
      md5: 9224c1cc7cab9abc3d3c0a0d053167b7
      size: 27103
    - path: cifar/plots/log_logistic_layers_partial_effect.pdf
      hash: md5
      md5: 39b2610fb9de1690d4d623a17884ee7a
      size: 28955
    - path: cifar/plots/log_normal_aft.pdf
      hash: md5
      md5: 2527e9f340d0e9f290c153104c8c3328
      size: 23817
    - path: cifar/plots/log_normal_epochs_partial_effect.pdf
      hash: md5
      md5: 1b0e597276e72b935b1b8f9105d3a2b4
      size: 28672
    - path: cifar/plots/log_normal_layers_partial_effect.pdf
      hash: md5
      md5: 7dfcb1c5b5065b1f6329ef82efeffea4
      size: 28982
    - path: cifar/plots/weibull_aft.pdf
      hash: md5
      md5: 0fac35179c7accad13f4d936c0765649
      size: 33056
    - path: cifar/plots/weibull_epochs_partial_effect.pdf
      hash: md5
      md5: d4cab0b8d7d143c4e756dd2378c01864
      size: 28141
    - path: cifar/plots/weibull_layers_partial_effect.pdf
      hash: md5
      md5: 9868a02ca8bf3376d544aa3fd635364b
      size: 28960
  copy_results:
    cmd: cp -r cifar/plots/* ~/ml_afr/cifar/
    deps:
    - path: cifar/plots/
      hash: md5
      md5: df42040ca38ecd5d6d16d4643a28d1a8.dir
      size: 15075916
      nfiles: 25
  clean@attack:
    cmd: python -m deckard.layers.clean_data -i cifar/reports/attack.csv -o cifar/reports/clean_attack.csv
      -c conf/clean.yaml
    deps:
    - path: cifar/reports/attack.csv
      hash: md5
      md5: 51d3b7360885430ef15c78e66a85393a
      size: 26068128
    params:
      params.yaml:
        files.directory: cifar
        files.reports: reports
      conf/clean.yaml:
        attacks:
          DeepFool: Deep
          FastGradientMethod: FGM
          HopSkipJump: HSJ
          PixelAttack: Pixel
          ProjectedGradientDescent: PGD
          ThresholdAttack: Thresh
        defences:
          Control: Control
          FeatureSqueezing: FSQ
          GaussianAugmentation: Gauss-in
          GaussianNoise: Gauss-out
          HighConfidence: Conf
          nb_epoch: Epochs
          model_layers: Control
        fillna:
          Epochs: 20
        params:
          Deep: attack.init.kwargs.nb_grads
          FGM: attack.init.kwargs.eps
          HSJ: attack.init.kwargs.max_iter
          Pixel: attack.init.kwargs.th
          PGD: attack.init.kwargs.eps
          Thresh: attack.init.kwargs.th
          Gauss-out: model.art.pipeline.postprocessor.kwargs.scale
          Conf: model.art.pipeline.postprocessor.kwargs.cutoff
          FSQ: model.art.pipeline.preprocessor.kwargs.bit_depth
          Gauss-in: model.art.pipeline.preprocessor.kwargs.sigma
          Control: model_layers
          Epochs: model.trainer.nb_epoch
    outs:
    - path: cifar/reports/clean_attack.csv
      hash: md5
      md5: 726a596355273abf4a5172268bf69c62
      size: 14801171
