schema: '2.0'
stages:
  compile@attack:
    cmd: python -m deckard.layers.compile --report_folder cifar/reports/attack --results_file
      cifar/reports/attack.csv
    deps:
    - path: cifar/reports/attack/
      md5: 22b73193c54a48f9496e5e6a7f42a88a.dir
      size: 9973370214
      nfiles: 34871
    - path: cifar/reports/attack/ResNet101.db
      md5: 268500e55100c8e2c0de628e8b66b612
      size: 819200
    - path: cifar/reports/attack/ResNet152.db
      md5: 47684cf7d10b05f6343f58579fd05af3
      size: 249856
    - path: cifar/reports/attack/ResNet18.db
      md5: bf2b93a31c49e96b219c23095504a7f1
      size: 819200
    - path: cifar/reports/attack/ResNet34.db
      md5: 8de8f4dfcda52bb40f206cf3c4977dd5
      size: 819200
    - path: cifar/reports/attack/ResNet50.db
      md5: 8adabcf8a15b13fc20ea31f58ae7388b
      size: 1069056
    outs:
    - path: cifar/reports/attack.csv
      md5: f782978aea22d56dbd68fa9f04e4dfcf
      size: 26091607
  clean@attack:
    cmd: python -m deckard.layers.clean_data -i cifar/reports/attack.csv -o cifar/reports/clean_attack.csv
      -c conf/clean.yaml
    deps:
    - path: cifar/reports/attack.csv
      md5: f782978aea22d56dbd68fa9f04e4dfcf
      size: 26091607
    params:
      params.yaml:
        files.directory: cifar
        files.reports: reports
      conf/clean.yaml:
        attacks:
          DeepFool: Deep
          FastGradientMethod: FGM
          HopSkipJump: HSJ
          PixelAttack: Pixel
          ProjectedGradientDescent: PGD
          ThresholdAttack: Thresh
        defences:
          Control: Control
          FeatureSqueezing: FSQ
          GaussianAugmentation: Gauss-in
          GaussianNoise: Gauss-out
          HighConfidence: Conf
          nb_epoch: Epochs
          model_layers: Control
        fillna:
          Epochs: 20
        params:
          Deep: attack.init.kwargs.nb_grads
          FGM: attack.init.kwargs.eps
          HSJ: attack.init.kwargs.max_iter
          Pixel: attack.init.kwargs.th
          PGD: attack.init.kwargs.eps
          Thresh: attack.init.kwargs.th
          Gauss-out: model.art.pipeline.postprocessor.kwargs.scale
          Conf: model.art.pipeline.postprocessor.kwargs.cutoff
          FSQ: model.art.pipeline.preprocessor.kwargs.bit_depth
          Gauss-in: model.art.pipeline.preprocessor.kwargs.sigma
          Control: model_layers
          Epochs: model.trainer.nb_epoch
    outs:
    - path: cifar/reports/clean_attack.csv
      md5: 60cd6fc0fede641a6ecf75633d63c167
      size: 14738413
  plot:
    cmd: python -m deckard.layers.plots --path cifar/plots/ --file cifar/reports/clean_attack.csv
      -c conf/plots.yaml
    deps:
    - path: cifar/reports/clean_attack.csv
      md5: 60cd6fc0fede641a6ecf75633d63c167
      size: 14738413
    params:
      params.yaml:
        files.directory: cifar
        files.reports: reports
      conf/plots.yaml:
        cat_plot:
        - file: adv_accuracy_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          set:
            yscale: linear
          titles: Adv. Accuracy vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: adv_accuracy
          ylabels: Adv. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: ben_accuracy_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          titles: Ben. Accuracy vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: accuracy
          ylabels: Ben. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: ben_failures_per_train_time_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          set:
            yscale: log
          titles: $\bar{C}_{ben.}$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: training_time_per_failure
          ylabels: $\bar{C}_{ben.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_failures_per_train_time_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          set:
            yscale: log
          titles: $\bar{C}_{adv.}$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: training_time_per_adv_failure
          ylabels: $\bar{C}_{adv.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_failures_per_train_time_vs_attack_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          set:
            yscale: log
          titles: $\bar{C}_{adv.}$ vs Attack Type
          x: atk_gen
          xlabels: Attack Type
          y: training_time_per_adv_failure
          ylabels: $\bar{C}_{adv.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_failures_per_test_time_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          titles: $h_{adv}$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: adv_failure_rate
          ylabels: $h_{adv.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_accuracy_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          titles: Adv. Accuracy vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: adv_accuracy
          ylabels: Adv. Ben. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_accuracy_vs_attack_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          titles: Adv. Accuracy vs Attack Type
          x: atk_gen
          xlabels: Attack Type
          y: adv_accuracy
          ylabels: Adv. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: ben_failure_rate_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          set:
            yscale: log
          titles: $h_{ben}(t; \theta)$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: failure_rate
          ylabels: $h_{ben}(t; \theta)$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        line_plot:
        - file: def_param_vs_accuracy.pdf
          hue: def_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
            title: Defence
          title: Ben. Accuracy vs Defence Strength
          x: def_value
          x_scale: linear
          xlabel: Defence Control Parameter
          y: accuracy
          y_scale:
          ylabel: Ben. Accuracy
        - file: def_param_vs_adv_accuracy.pdf
          hue: def_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
            title: Defence
          title: Adv. Accuracy vs Defence Strength
          x: def_value
          x_scale: linear
          xlabel: Defence Control Parameter
          y: adv_accuracy
          y_scale:
          ylabel: Adv. Accuracy
        - file: def_param_vs_adv_failure_rate.pdf
          hue: def_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
            title: Defence
          title: $h_{adv}$ vs Defence Strength
          x: def_value
          x_scale: linear
          xlabel: Defence Control Parameter
          y: adv_failure_rate
          y_scale: log
          ylabel: $h_{adv.}$
        - file: atk_param_vs_accuracy.pdf
          hue: atk_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
          title: Adv. Accuracy vs Attack Strength
          x: atk_value
          x_scale: linear
          xlabel: Attack Control Parameter
          y: adv_accuracy
          y_scale:
          ylabel: Adv. Accuracy
          hue_order:
          - FGM
          - PGD
          - Deep
          - HSJ
          - Pixel
          - Thresh
        scatter_plot:
        - x: train_time_per_sample
          y: adv_failure_rate
          hue: model_name
          xlabel: $t_{train}$
          ylabel: $h_{adv}$
          title: $h_{adv}$ vs $t_{train}$
          file: adv_failure_rate_vs_train_time.pdf
          y_scale: log
          x_scale: log
          legend:
            title: Model Name
            bbox_to_anchor:
            - 1.05
            - 1
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
    outs:
    - path: cifar/plots/adv_accuracy_vs_attack_type.pdf
      md5: 3d65097348645d60de56f95acca3e211
      size: 31942
    - path: cifar/plots/adv_accuracy_vs_defence_type.pdf
      md5: df16605ddd59883506576de04a34cf4d
      size: 29630
    - path: cifar/plots/adv_failure_rate_vs_train_time.pdf
      md5: 5dfe435e98ee240327e70a20af0366e4
      size: 19568
    - path: cifar/plots/adv_failures_per_test_time_vs_defence_type.pdf
      md5: 3556560c1a22227ba364e817245991b0
      size: 36946
    - path: cifar/plots/adv_failures_per_train_time_vs_attack_type.pdf
      md5: 9b79686a3e52e235aac34b27c202f806
      size: 36910
    - path: cifar/plots/adv_failures_per_train_time_vs_defence_type.pdf
      md5: eb9a788bfb5b319750f19f8343fb16a2
      size: 30986
    - path: cifar/plots/atk_param_vs_accuracy.pdf
      md5: 774e791f6bfce7ece5bfd7d88d0a3165
      size: 21164
    - path: cifar/plots/ben_accuracy_vs_defence_type.pdf
      md5: ab646dd60cb2a7f813664b384b327f2c
      size: 26816
    - path: cifar/plots/ben_failure_rate_vs_defence_type.pdf
      md5: 31978f4626778b31e319de985704626a
      size: 36929
    - path: cifar/plots/ben_failures_per_train_time_vs_defence_type.pdf
      md5: 1cc5b7882f2a79667099972289146ed4
      size: 31227
    - path: cifar/plots/def_param_vs_accuracy.pdf
      md5: d31d88aef260606fc5453ae7f6ade8cb
      size: 18806
    - path: cifar/plots/def_param_vs_adv_accuracy.pdf
      md5: 897dbd51d96bee32eeeb7a6fa99e500c
      size: 18681
    - path: cifar/plots/def_param_vs_adv_failure_rate.pdf
      md5: f2a36c74da0aa81b2fd4c8346c53bb07
      size: 22089
  afr:
    cmd: python -m deckard.layers.afr --dataset cifar --data_file cifar/reports/clean_attack.csv  --duration_col
      adv_fit_time --dataset mnist --config_file conf/afr.yaml --plots_folder cifar/plots/
    deps:
    - path: cifar/plots/adv_accuracy_vs_defence_type.pdf
      md5: df16605ddd59883506576de04a34cf4d
      size: 29630
    - path: cifar/reports/clean_attack.csv
      md5: 60cd6fc0fede641a6ecf75633d63c167
      size: 14738413
    params:
      params.yaml:
        files.directory: cifar
      conf/afr.yaml:
        covariates:
        - accuracy
        - train_time
        - predict_time
        - atk_value
        - def_value
        - data.sample.random_state
        - adv_failure_rate
        - model_layers
        - adv_fit_time
        - model.trainer.nb_epoch
        log_logistic:
          plot:
            file: log_logistic_aft.pdf
            title: Log logistic AFR Model
          labels:
            'Intercept: rho_': $\rho$
            'Intercept: lambda_': $\lambda$
            'data.sample.random_state: lambda_': Random State
            'atk_value: lambda_': Attack Strength
            'train_time: lambda_': $t_{train}$
            'predict_proba_time: lambda_': $t_{predict}$
            'adv_accuracy: lambda_': Adv. Accuracy
            'accuracy: lambda_': Ben. Accuracy
            'adv_fit_time: lambda_': $t_{attack}$
            'adv_failure_rate: lambda_': $h_{adv.}(t;\theta)$
            'failure_rate: lambda_': $h_{ben.}(t;\theta)$
            'model.trainer.nb_epoch: lambda_': No. of Epochs
            'model.trainer.batch_size: lambda_': Batch Size
            def_gen: Defence
          partial_effect:
          - file: log_logistic_epochs_partial_effect.pdf
            covariate_array: model.trainer.nb_epoch
            values_array:
            - 1
            - 10
            - 25
            - 50
            title: $S(t)$ for Log-Logistic AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: Epochs
              labels:
              - '1'
              - '10'
              - '25'
              - '50'
          - file: log_logistic_layers_partial_effect.pdf
            covariate_array: model_layers
            values_array:
            - 18
            - 34
            - 50
            - 101
            - 152
            title: $S(t)$ for Cox AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: ResNet Layers
              labels:
              - '18'
              - '34'
              - '50'
              - '101'
              - '152'
        log_normal:
          plot:
            file: log_normal_aft.pdf
            title: Log Normal AFR Model
          labels:
            'Intercept: rho_': $\rho$
            'Intercept: lambda_': $\lambda$
            'data.sample.random_state: lambda_': Random State
            'atk_value: lambda_': Attack Strength
            'train_time: lambda_': $t_{train}$
            'predict_proba_time: lambda_': $t_{predict}$
            'adv_accuracy: lambda_': Adv. Accuracy
            'accuracy: lambda_': Ben. Accuracy
            'adv_fit_time: lambda_': $t_{attack}$
            'adv_failure_rate: lambda_': $h_{adv.}(t;\theta)$
            'failure_rate: lambda_': $h_{ben.}(t;\theta)$
            'model.trainer.nb_epoch: lambda_': No. of Epochs
            'model.trainer.batch_size: lambda_': Batch Size
            def_gen: Defence
          partial_effect:
          - file: log_normal_epochs_partial_effect.pdf
            covariate_array: model.trainer.nb_epoch
            values_array:
            - 1
            - 10
            - 25
            - 50
            title: $S(t)$ for Log-Normal AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: Epochs
              labels:
              - '1'
              - '10'
              - '25'
              - '50'
          - file: log_normal_layers_partial_effect.pdf
            covariate_array: model_layers
            values_array:
            - 18
            - 34
            - 50
            - 101
            - 152
            title: $S(t)$ for Cox AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: ResNet Layers
              labels:
              - '18'
              - '34'
              - '50'
              - '101'
              - '152'
        weibull:
          plot:
            file: weibull_aft.pdf
            title: Weibull AFR Model
          labels:
            'Intercept: rho_': $\rho$
            'Intercept: lambda_': $\lambda$
            'data.sample.random_state: lambda_': Random State
            'atk_value: lambda_': Attack Strength
            'train_time: lambda_': $t_{train}$
            'predict_proba_time: lambda_': $t_{predict}$
            'adv_accuracy: lambda_': Adv. Accuracy
            'accuracy: lambda_': Ben. Accuracy
            'adv_fit_time: lambda_': $t_{attack}$
            'adv_failure_rate: lambda_': $h_{adv.}(t;\theta)$
            'failure_rate: lambda_': $h_{ben.}(t;\theta)$
            'model.trainer.nb_epoch: lambda_': No. of Epochs
            'model.trainer.batch_size: lambda_': Batch Size
            def_gen: Defence
          partial_effect:
          - file: weibull_epochs_partial_effect.pdf
            covariate_array: model.trainer.nb_epoch
            values_array:
            - 1
            - 10
            - 25
            - 50
            title: $S(t)$ for Weibull AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: Epochs
              labels:
              - '1'
              - '10'
              - '25'
              - '50'
          - file: weibull_layers_partial_effect.pdf
            covariate_array: model_layers
            values_array:
            - 18
            - 34
            - 50
            - 101
            - 152
            title: $S(t)$ for Cox AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: ResNet Layers
              labels:
              - '18'
              - '34'
              - '50'
              - '101'
              - '152'
    outs:
    - path: cifar/plots/log_logistic_aft.pdf
      md5: 1a6733eecaa5e6e200ea7bde4ea76f5a
      size: 22725
    - path: cifar/plots/log_logistic_epochs_partial_effect.pdf
      md5: 0480249c08336cbeb90ccc0b3b4783c0
      size: 26049
    - path: cifar/plots/log_logistic_layers_partial_effect.pdf
      md5: 09abeebe66582f660a3c4b9e085a5a9f
      size: 28217
    - path: cifar/plots/log_normal_aft.pdf
      md5: bce4a736d66ec6ca9aab95e593307c7f
      size: 23642
    - path: cifar/plots/log_normal_epochs_partial_effect.pdf
      md5: 13562c5194f8a10f2cbcf5b35e392d6e
      size: 26627
    - path: cifar/plots/log_normal_layers_partial_effect.pdf
      md5: b23c3b038de4cdd3262a0b96384045ef
      size: 28277
    - path: cifar/plots/weibull_aft.pdf
      md5: 54446793cb75d7ed912ea2be46fed59a
      size: 32763
    - path: cifar/plots/weibull_epochs_partial_effect.pdf
      md5: e2c7fdbc1836f71bc4096323d93e1efc
      size: 26703
    - path: cifar/plots/weibull_layers_partial_effect.pdf
      md5: de48a553a80beda43ff9da62d295e828
      size: 28314
  copy_results:
    cmd: cp -r cifar/plots/* ~/ml_afr/cifar/
    deps:
    - path: cifar/plots/
      md5: fe20f98c6bf71f3145e78a357422d6d2.dir
      size: 14976021
      nfiles: 25
  train:
    cmd: python -m deckard.layers.experiment train --config_file cifar10.yaml
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: torch_cifar10
          sample:
            random_state: 0
            stratify: true
          sklearn_pipeline:
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          data_dir: data
          data_file: data
          data_type: .pkl
          directory: cifar
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            data:
              _target_: deckard.base.data.Data
              generate:
                name: torch_cifar10
              sample:
                random_state: 0
                stratify: true
              sklearn_pipeline:
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            initialize:
              clip_values:
              - 0.0
              - 255.0
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
          data:
            _target_: deckard.base.data.Data
            generate:
              name: torch_cifar10
            sample:
              random_state: 0
              stratify: true
            sklearn_pipeline:
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 3
            num_classes: 10
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epoch: 100
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: cifar/data/data.pkl
      md5: 6503fed5d4e6cc1163898c0ab6a863dd
      size: 739680311
    - path: cifar/models/model.optimizer.pt
      md5: 2b7af69ddee1c00127b846f347aeb2e9
      size: 44804557
    - path: cifar/models/model.pt
      md5: 4cd9c43e5451b3a5ec2649cf57dcefe0
      size: 44813453
    - path: cifar/reports/train/default/predictions.json
      md5: c4909eac4705817c9f1e5cd5d47d9be1
      size: 2441130
    - path: cifar/reports/train/default/score_dict.json
      md5: fc87668bc8ceb92c59d48f0a5bde00d9
      size: 404
