schema: '2.0'
stages:
  train:
    cmd: python -m deckard.layers.experiment train --config_file cifar100.yaml
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: torch_cifar100
            path: original_data
          sample:
            random_state: 0
            stratify: true
          sklearn_pipeline:
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          data_dir: data
          data_file: data
          data_type: .pkl
          directory: cifar100
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            data:
              _target_: deckard.base.data.Data
              generate:
                name: torch_cifar100
                path: original_data
              sample:
                random_state: 0
                stratify: true
              sklearn_pipeline:
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
          data:
            _target_: deckard.base.data.Data
            generate:
              name: torch_cifar100
              path: original_data
            sample:
              random_state: 0
              stratify: true
            sklearn_pipeline:
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 3
            num_classes: 100
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epoch: 10
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: cifar100/data/data.pkl
      md5: 1070854e6c00fc787bc0fdfc82792fd6
      size: 761280311
    - path: cifar100/models/model.optimizer.pt
      md5: 63a3e08aea6252161ecb8341959089d8
      size: 44989261
    - path: cifar100/models/model.pt
      md5: 94f5a359a540525eb14cf978558ec2d5
      size: 44998157
    - path: cifar100/reports/train/default/predictions.json
      md5: 0fc8724f3e3b0850bccbffefaa70291b
      size: 24439795
    - path: cifar100/reports/train/default/score_dict.json
      md5: a6933a3788408d39c91186fc0bfdbbab
      size: 878
  attack:
    cmd: python -m deckard.layers.experiment attack --config_file cifar100.yaml
    deps:
    - path: cifar100/data/data.pkl
      md5: 1070854e6c00fc787bc0fdfc82792fd6
      size: 761280311
    - path: cifar100/models/model.pt
      md5: 94f5a359a540525eb14cf978558ec2d5
      size: 44998157
    params:
      params.yaml:
        attack:
          _target_: deckard.base.attack.Attack
          attack_size: 10
          data:
            _target_: deckard.base.data.Data
            generate:
              name: torch_cifar100
              path: original_data
            sample:
              random_state: 0
              stratify: true
            sklearn_pipeline:
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.attack.AttackInitializer
            model:
              _target_: deckard.base.model.Model
              art:
                _target_: deckard.base.model.art_pipeline.ArtPipeline
                data:
                  _target_: deckard.base.data.Data
                  generate:
                    name: torch_cifar100
                    path: original_data
                  sample:
                    random_state: 0
                    stratify: true
                  sklearn_pipeline:
                    preprocessor:
                      name: sklearn.preprocessing.StandardScaler
                      with_mean: true
                      with_std: true
                initialize:
                  clip_values:
                  - 0
                  - 255
                  criterion:
                    name: torch.nn.CrossEntropyLoss
                  optimizer:
                    lr: 0.01
                    momentum: 0.9
                    name: torch.optim.SGD
                library: pytorch
              data:
                _target_: deckard.base.data.Data
                generate:
                  name: torch_cifar100
                  path: original_data
                sample:
                  random_state: 0
                  stratify: true
                sklearn_pipeline:
                  preprocessor:
                    name: sklearn.preprocessing.StandardScaler
                    with_mean: true
                    with_std: true
              init:
                _target_: deckard.base.model.ModelInitializer
                name: torch_example.ResNet18
                num_channels: 3
                num_classes: 100
              library: pytorch
              trainer:
                batch_size: 1024
                nb_epoch: 10
            name: art.attacks.evasion.HopSkipJump
          method: evasion
          model:
            _target_: deckard.base.model.Model
            art:
              _target_: deckard.base.model.art_pipeline.ArtPipeline
              data:
                _target_: deckard.base.data.Data
                generate:
                  name: torch_cifar100
                  path: original_data
                sample:
                  random_state: 0
                  stratify: true
                sklearn_pipeline:
                  preprocessor:
                    name: sklearn.preprocessing.StandardScaler
                    with_mean: true
                    with_std: true
              initialize:
                clip_values:
                - 0
                - 255
                criterion:
                  name: torch.nn.CrossEntropyLoss
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              library: pytorch
            data:
              _target_: deckard.base.data.Data
              generate:
                name: torch_cifar100
                path: original_data
              sample:
                random_state: 0
                stratify: true
              sklearn_pipeline:
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            init:
              _target_: deckard.base.model.ModelInitializer
              name: torch_example.ResNet18
              num_channels: 3
              num_classes: 100
            library: pytorch
            trainer:
              batch_size: 1024
              nb_epoch: 10
        data:
          _target_: deckard.base.data.Data
          generate:
            name: torch_cifar100
            path: original_data
          sample:
            random_state: 0
            stratify: true
          sklearn_pipeline:
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          data_dir: data
          data_file: data
          data_type: .pkl
          directory: cifar100
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            data:
              _target_: deckard.base.data.Data
              generate:
                name: torch_cifar100
                path: original_data
              sample:
                random_state: 0
                stratify: true
              sklearn_pipeline:
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
          data:
            _target_: deckard.base.data.Data
            generate:
              name: torch_cifar100
              path: original_data
            sample:
              random_state: 0
              stratify: true
            sklearn_pipeline:
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 3
            num_classes: 100
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epoch: 10
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: cifar100/attacks/attack.pkl
      md5: 28ac38301caadc7bc7db0bcc82f3adfe
      size: 123046
    - path: cifar100/reports/attack/default/adv_predictions.json
      md5: 4b7c0279de85f0586a91bcc67046157a
      size: 21286
    - path: cifar100/reports/attack/default/score_dict.json
      md5: 352589a61f6f37759df461f0615ba44c
      size: 1166
  attacks@ResNet18:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet18
      stage=attack ++hydra.sweeper.storage=sqlite:///cifar100/reports/attack/ResNet18.db
      --config-name cifar100.yaml
    deps:
    - path: attacks.sh
      md5: d78e6d6b697480fbccfb58bd791af506
      size: 2897
    - path: cifar100/reports/attack/default/score_dict.json
      md5: cc6250493ce23c358493e58248580470
      size: 1349
    - path: models.sh
      md5: 1937e58bedac027034aea7d4a5712407
      size: 1380
    outs:
    - path: cifar100/reports/attack/ResNet18.db
      md5: a92cd9f6c41853a0752f3d8b3bcc5c5d
      size: 450560
  attacks@ResNet152:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet152
      stage=attack ++hydra.sweeper.storage=sqlite:///cifar100/reports/attack/ResNet152.db
      --config-name cifar100.yaml
    deps:
    - path: attacks.sh
      md5: d78e6d6b697480fbccfb58bd791af506
      size: 2897
    - path: cifar100/reports/attack/default/score_dict.json
      md5: cc6250493ce23c358493e58248580470
      size: 1349
    - path: models.sh
      md5: 1937e58bedac027034aea7d4a5712407
      size: 1380
    outs:
    - path: cifar100/reports/attack/ResNet152.db
      md5: 4350bd46825aec423f0697eafd8bab5c
      size: 450560
  attacks@ResNet34:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet34
      stage=attack ++hydra.sweeper.storage=sqlite:///cifar100/reports/attack/ResNet34.db
      --config-name cifar100.yaml
    deps:
    - path: attacks.sh
      md5: d78e6d6b697480fbccfb58bd791af506
      size: 2897
    - path: cifar100/reports/attack/default/score_dict.json
      md5: cc6250493ce23c358493e58248580470
      size: 1349
    - path: models.sh
      md5: 1937e58bedac027034aea7d4a5712407
      size: 1380
    outs:
    - path: cifar100/reports/attack/ResNet34.db
      md5: 14cee99bc02f11e3cddd61d012fa9d7a
      size: 450560
  attacks@ResNet50:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet50
      stage=attack ++hydra.sweeper.storage=sqlite:///cifar100/reports/attack/ResNet50.db
      --config-name cifar100.yaml
    deps:
    - path: attacks.sh
      md5: d78e6d6b697480fbccfb58bd791af506
      size: 2897
    - path: cifar100/reports/attack/default/score_dict.json
      md5: cc6250493ce23c358493e58248580470
      size: 1349
    - path: models.sh
      md5: 1937e58bedac027034aea7d4a5712407
      size: 1380
    outs:
    - path: cifar100/reports/attack/ResNet50.db
      md5: beed70d2d444ab0a701398cc356310cf
      size: 450560
  attacks@ResNet101:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet101
      stage=attack ++hydra.sweeper.storage=sqlite:///cifar100/reports/attack/ResNet101.db
      --config-name cifar100.yaml
    deps:
    - path: attacks.sh
      md5: d78e6d6b697480fbccfb58bd791af506
      size: 2897
    - path: cifar100/reports/attack/default/score_dict.json
      md5: cc6250493ce23c358493e58248580470
      size: 1349
    - path: models.sh
      md5: 1937e58bedac027034aea7d4a5712407
      size: 1380
    outs:
    - path: cifar100/reports/attack/ResNet101.db
      md5: 536be9988a2320d99f09c861e0bcd347
      size: 450560
  compile@attack:
    cmd: python -m deckard.layers.compile --report_folder cifar100/reports/attack
      --results_file cifar100/reports/attack.csv
    deps:
    - path: cifar100/reports/attack/
      md5: 90b53d2ef28cb705a378b4ccc28ca86b.dir
      size: 195753796
      nfiles: 2888
    - path: cifar100/reports/attack/ResNet101.db
      md5: 536be9988a2320d99f09c861e0bcd347
      size: 450560
    - path: cifar100/reports/attack/ResNet18.db
      md5: a92cd9f6c41853a0752f3d8b3bcc5c5d
      size: 450560
    - path: cifar100/reports/attack/ResNet34.db
      md5: 14cee99bc02f11e3cddd61d012fa9d7a
      size: 450560
    - path: cifar100/reports/attack/ResNet50.db
      md5: beed70d2d444ab0a701398cc356310cf
      size: 450560
    outs:
    - path: cifar100/reports/attack.csv
      md5: b69941ff5bcd6c8478fb1fbff183a6cd
      size: 3426079
  plot:
    cmd: python -m deckard.layers.plots --path cifar100/plots/ --file cifar100/reports/clean_attack.csv
      -c conf/plots.yaml
    deps:
    - path: cifar100/reports/clean_attack.csv
      hash: md5
      md5: aa3d7eb23985fbe51de371f6f5d98f32
      size: 3006276
    params:
      params.yaml:
        files.directory: cifar100
        files.reports: reports
      conf/plots.yaml:
        cat_plot:
        - file: adv_accuracy_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          set:
            yscale: linear
          titles: Adv. Accuracy vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: adv_accuracy
          ylabels: Adv. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: ben_accuracy_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          titles: Ben. Accuracy vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: accuracy
          ylabels: Ben. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: ben_failures_per_train_time_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          set:
            yscale: log
          titles: $\bar{C}_{ben.}$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: training_time_per_failure
          ylabels: $\bar{C}_{ben.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_failures_per_train_time_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          set:
            yscale: log
          titles: $\bar{C}_{adv.}$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: training_time_per_adv_failure
          ylabels: $\bar{C}_{adv.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_failures_per_train_time_vs_attack_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          set:
            yscale: log
          titles: $\bar{C}_{adv.}$ vs Attack Type
          x: atk_gen
          xlabels: Attack Type
          y: training_time_per_adv_failure
          ylabels: $\bar{C}_{adv.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_failures_per_test_time_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          titles: $h_{adv}$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: adv_failure_rate
          ylabels: $h_{adv.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_accuracy_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          titles: Adv. Accuracy vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: adv_accuracy
          ylabels: Adv. Ben. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_accuracy_vs_attack_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          titles: Adv. Accuracy vs Attack Type
          x: atk_gen
          xlabels: Attack Type
          y: adv_accuracy
          ylabels: Adv. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: ben_failure_rate_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          set:
            yscale: log
          titles: $h_{ben}(t; \theta)$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: failure_rate
          ylabels: $h_{ben}(t; \theta)$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        line_plot:
        - file: def_param_vs_accuracy.pdf
          hue: def_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
            title: Defence
          title: Ben. Accuracy vs Defence Strength
          x: def_value
          x_scale: linear
          xlabel: Defence Control Parameter
          y: accuracy
          y_scale:
          ylabel: Ben. Accuracy
        - file: def_param_vs_adv_accuracy.pdf
          hue: def_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
            title: Defence
          title: Adv. Accuracy vs Defence Strength
          x: def_value
          x_scale: linear
          xlabel: Defence Control Parameter
          y: adv_accuracy
          y_scale:
          ylabel: Adv. Accuracy
        - file: def_param_vs_adv_failure_rate.pdf
          hue: def_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
            title: Defence
          title: $h_{adv}$ vs Defence Strength
          x: def_value
          x_scale: linear
          xlabel: Defence Control Parameter
          y: adv_failure_rate
          y_scale: log
          ylabel: $h_{adv.}$
        - file: atk_param_vs_accuracy.pdf
          hue: atk_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
          title: Adv. Accuracy vs Attack Strength
          x: atk_value
          x_scale: linear
          xlabel: Attack Control Parameter
          y: adv_accuracy
          y_scale:
          ylabel: Adv. Accuracy
          hue_order:
          - FGM
          - PGD
          - Deep
          - HSJ
          - Pixel
          - Thresh
        scatter_plot:
        - x: train_time_per_sample
          y: adv_failure_rate
          hue: model_name
          xlabel: $t_{train}$
          ylabel: $h_{adv}$
          title: $h_{adv}$ vs $t_{train}$
          file: adv_failure_rate_vs_train_time.pdf
          y_scale: log
          x_scale: log
          legend:
            title: Model Name
            bbox_to_anchor:
            - 1.05
            - 1
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
    outs:
    - path: cifar100/plots/adv_accuracy_vs_attack_type.pdf
      hash: md5
      md5: cd21bb04fbf032cd9d444efc450b043e
      size: 25379
    - path: cifar100/plots/adv_accuracy_vs_defence_type.pdf
      hash: md5
      md5: 55af13a3d0ff64373c1d0c46f717b226
      size: 19495
    - path: cifar100/plots/adv_failure_rate_vs_train_time.pdf
      hash: md5
      md5: 9ab27e5fde02665c9f4bc47775ba0ee5
      size: 31168
    - path: cifar100/plots/adv_failures_per_test_time_vs_defence_type.pdf
      hash: md5
      md5: f0099cf03af13ce2cd74cf088c9ca233
      size: 23209
    - path: cifar100/plots/adv_failures_per_train_time_vs_attack_type.pdf
      hash: md5
      md5: 9229b09210fff3980e435474e4f326a9
      size: 37442
    - path: cifar100/plots/adv_failures_per_train_time_vs_defence_type.pdf
      hash: md5
      md5: 570c09a46a5b8c0ce5b69d1b75a5482a
      size: 18810
    - path: cifar100/plots/atk_param_vs_accuracy.pdf
      hash: md5
      md5: 9155a0c72ebe982ccba4a35ade16d7e6
      size: 19628
    - path: cifar100/plots/ben_accuracy_vs_defence_type.pdf
      hash: md5
      md5: d028ae5f0313f56b3fc39fcfac9bc282
      size: 15616
    - path: cifar100/plots/ben_failure_rate_vs_defence_type.pdf
      hash: md5
      md5: 125540f8e2a8308d01eefa08be6aa426
      size: 24867
    - path: cifar100/plots/ben_failures_per_train_time_vs_defence_type.pdf
      hash: md5
      md5: 5e3f558f9affbf9b46b7557a0d559ed1
      size: 18516
    - path: cifar100/plots/def_param_vs_accuracy.pdf
      hash: md5
      md5: 01ba519eb255aa3970843e6a210be206
      size: 17948
    - path: cifar100/plots/def_param_vs_adv_accuracy.pdf
      hash: md5
      md5: 74ce44adb8bacb3048e84dacae6b678d
      size: 17677
    - path: cifar100/plots/def_param_vs_adv_failure_rate.pdf
      hash: md5
      md5: 19ea1e969df17674ec700bf11cce3a95
      size: 20713
  afr:
    cmd: python -m deckard.layers.afr --dataset cifar100 --data_file cifar100/plots/data.csv
      --target adv_accuracy --duration_col adv_fit_time --dataset cifar100
    deps:
    - path: cifar100/plots/data.csv
      md5: 0ade05afcc3da9f9249a3140849a5f8c
      size: 2977261
    outs:
    - path: cifar100/plots/aft_comparison.csv
      md5: 6ad56e75d18d7ea9349346b79a772167
      size: 239
    - path: cifar100/plots/aft_comparison.tex
      md5: 7fd18c110cfcbbaf15b593d533706ed7
      size: 893
    - path: cifar100/plots/cox_aft.pdf
      md5: 10bde6a3f3e7a8463424607968f3e4b5
      size: 30834
    - path: cifar100/plots/cox_partial_effects.pdf
      md5: 3695b911cc517cea981298a65a4ad484
      size: 38233
    - path: cifar100/plots/log_logistic_aft.pdf
      md5: beb231da66fec538d29b8511829232fc
      size: 33470
    - path: cifar100/plots/log_logistic_partial_effects.pdf
      md5: a362711d166b57a5fb10a098aabcd831
      size: 29667
    - path: cifar100/plots/log_normal_aft.pdf
      md5: 54b75851860d177c056ee6ca72ca7226
      size: 33983
    - path: cifar100/plots/log_normal_partial_effects.pdf
      md5: 8af43a32bdbba1686206882c3822922a
      size: 30232
    - path: cifar100/plots/weibull_aft.pdf
      md5: 2d7fa9a0bd0c0729d3492399a0d30178
      size: 31582
    - path: cifar100/plots/weibull_partial_effects.pdf
      md5: cde5790226086c2ea7567011fba527db
      size: 29933
  copy_results:
    cmd: cp -r cifar100/plots/* ~/ml_afr/cifar100
    deps:
    - path: cifar100/plots/
      hash: md5
      md5: aae04e75d81e69e3583717ee10da3aef.dir
      size: 3267729
      nfiles: 14
  clean@attack:
    cmd: python -m deckard.layers.clean_data -i cifar100/reports/attack.csv -o cifar100/reports/clean_attack.csv
      -c conf/clean.yaml
    deps:
    - path: cifar100/reports/attack.csv
      md5: b69941ff5bcd6c8478fb1fbff183a6cd
      size: 3426079
    params:
      params.yaml:
        files.directory: cifar100
        files.reports: reports
      conf/clean.yaml:
        attacks:
          DeepFool: Deep
          FastGradientMethod: FGM
          HopSkipJump: HSJ
          PixelAttack: Pixel
          ProjectedGradientDescent: PGD
          ThresholdAttack: Thresh
        defences:
          Control: Control
          nb_epoch: Epochs
          model_layers: Control
        fillna:
          Epochs: 20
        params:
          Deep: attack.init.nb_grads
          FGM: attack.init.eps
          HSJ: attack.init.max_iter
          Pixel: attack.init.th
          PGD: attack.init.eps
          Thresh: attack.init.th
          Gauss-out: model.art.pipeline.postprocessor.scale
          Conf: model.art.pipeline.postprocessor.cutoff
          FSQ: model.art.pipeline.preprocessor.bit_depth
          Gauss-in: model.art.pipeline.preprocessor.sigma
          Control: model_layers
          Epochs: model.trainer.nb_epoch
    outs:
    - path: cifar100/reports/clean_attack.csv
      hash: md5
      md5: aa3d7eb23985fbe51de371f6f5d98f32
      size: 3006276
