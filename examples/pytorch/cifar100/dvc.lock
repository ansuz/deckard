schema: '2.0'
stages:
  train:
    cmd: python -m deckard.layers.experiment train --config_file cifar100.yaml
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: torch_cifar100
            path: original_data
          sample:
            random_state: 0
            stratify: true
          sklearn_pipeline:
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          data_dir: data
          data_file: data
          data_type: .pkl
          directory: cifar100
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            data:
              _target_: deckard.base.data.Data
              generate:
                name: torch_cifar100
                path: original_data
              sample:
                random_state: 0
                stratify: true
              sklearn_pipeline:
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
          data:
            _target_: deckard.base.data.Data
            generate:
              name: torch_cifar100
              path: original_data
            sample:
              random_state: 0
              stratify: true
            sklearn_pipeline:
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 3
            num_classes: 100
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epoch: 10
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: cifar100/reports/train/default/predictions.json
      md5: 3ef4550e044e6e587079a021519b2bc9
      size: 24402557
    - path: cifar100/reports/train/default/score_dict.json
      md5: 8fdae820f9ad65f0c851d4ad8eb0267d
      size: 883
  attack:
    cmd: python -m deckard.layers.experiment attack --config_file cifar100.yaml
    deps:
    - path: cifar100/reports/train/default/predictions.json
      md5: 3ef4550e044e6e587079a021519b2bc9
      size: 24402557
    params:
      params.yaml:
        attack:
          _target_: deckard.base.attack.Attack
          attack_size: 10
          data:
            _target_: deckard.base.data.Data
            generate:
              name: torch_cifar100
              path: original_data
            sample:
              random_state: 0
              stratify: true
            sklearn_pipeline:
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.attack.AttackInitializer
            model:
              _target_: deckard.base.model.Model
              art:
                _target_: deckard.base.model.art_pipeline.ArtPipeline
                data:
                  _target_: deckard.base.data.Data
                  generate:
                    name: torch_cifar100
                    path: original_data
                  sample:
                    random_state: 0
                    stratify: true
                  sklearn_pipeline:
                    preprocessor:
                      name: sklearn.preprocessing.StandardScaler
                      with_mean: true
                      with_std: true
                initialize:
                  clip_values:
                  - 0
                  - 255
                  criterion:
                    name: torch.nn.CrossEntropyLoss
                  optimizer:
                    lr: 0.01
                    momentum: 0.9
                    name: torch.optim.SGD
                library: pytorch
              data:
                _target_: deckard.base.data.Data
                generate:
                  name: torch_cifar100
                  path: original_data
                sample:
                  random_state: 0
                  stratify: true
                sklearn_pipeline:
                  preprocessor:
                    name: sklearn.preprocessing.StandardScaler
                    with_mean: true
                    with_std: true
              init:
                _target_: deckard.base.model.ModelInitializer
                name: torch_example.ResNet18
                num_channels: 3
                num_classes: 100
              library: pytorch
              trainer:
                batch_size: 1024
                nb_epoch: 10
            name: art.attacks.evasion.HopSkipJump
          method: evasion
          model:
            _target_: deckard.base.model.Model
            art:
              _target_: deckard.base.model.art_pipeline.ArtPipeline
              data:
                _target_: deckard.base.data.Data
                generate:
                  name: torch_cifar100
                  path: original_data
                sample:
                  random_state: 0
                  stratify: true
                sklearn_pipeline:
                  preprocessor:
                    name: sklearn.preprocessing.StandardScaler
                    with_mean: true
                    with_std: true
              initialize:
                clip_values:
                - 0
                - 255
                criterion:
                  name: torch.nn.CrossEntropyLoss
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              library: pytorch
            data:
              _target_: deckard.base.data.Data
              generate:
                name: torch_cifar100
                path: original_data
              sample:
                random_state: 0
                stratify: true
              sklearn_pipeline:
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            init:
              _target_: deckard.base.model.ModelInitializer
              name: torch_example.ResNet18
              num_channels: 3
              num_classes: 100
            library: pytorch
            trainer:
              batch_size: 1024
              nb_epoch: 10
        data:
          _target_: deckard.base.data.Data
          generate:
            name: torch_cifar100
            path: original_data
          sample:
            random_state: 0
            stratify: true
          sklearn_pipeline:
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          data_dir: data
          data_file: data
          data_type: .pkl
          directory: cifar100
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            data:
              _target_: deckard.base.data.Data
              generate:
                name: torch_cifar100
                path: original_data
              sample:
                random_state: 0
                stratify: true
              sklearn_pipeline:
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
          data:
            _target_: deckard.base.data.Data
            generate:
              name: torch_cifar100
              path: original_data
            sample:
              random_state: 0
              stratify: true
            sklearn_pipeline:
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 3
            num_classes: 100
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epoch: 10
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: cifar100/attacks/attack.pkl
      md5: 5317760d3c6f266ece07523e98517d46
      size: 123046
    - path: cifar100/reports/attack/default/adv_predictions.json
      md5: 20fb876ceb8d545fce99d183d3dd1f15
      size: 21494
    - path: cifar100/reports/attack/default/score_dict.json
      md5: 9a5c2618452da4ccadea22e30a78086e
      size: 1167
  attacks@ResNet18:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet18
      stage=attack ++hydra.sweeper.storage=sqlite:///cifar100/reports/attack/ResNet18.db
      --config-name cifar100.yaml
    deps:
    - path: attacks.sh
      md5: d78e6d6b697480fbccfb58bd791af506
      size: 2897
    - path: cifar100/reports/attack/default/score_dict.json
      md5: 9a5c2618452da4ccadea22e30a78086e
      size: 1167
    - path: models.sh
      md5: 246aa450e3718a75e46629425b71430e
      size: 1561
    outs:
    - path: cifar100/reports/attack/ResNet18.db
      md5: 4799036df0e9a004b40a426502085fdc
      size: 7032832
  attacks@ResNet34:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet34
      stage=attack ++hydra.sweeper.storage=sqlite:///cifar100/reports/attack/ResNet34.db
      --config-name cifar100.yaml
    deps:
    - path: attacks.sh
      md5: d78e6d6b697480fbccfb58bd791af506
      size: 2897
    - path: cifar100/reports/attack/default/score_dict.json
      md5: 9a5c2618452da4ccadea22e30a78086e
      size: 1167
    - path: models.sh
      md5: 246aa450e3718a75e46629425b71430e
      size: 1561
    outs:
    - path: cifar100/reports/attack/ResNet34.db
      md5: 6ab0bb1c2f12d4cc3a6af6ec31c20df6
      size: 3317760
  attacks@ResNet50:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet50
      stage=attack ++hydra.sweeper.storage=sqlite:///cifar100/reports/attack/ResNet50.db
      --config-name cifar100.yaml
    deps:
    - path: attacks.sh
      md5: d78e6d6b697480fbccfb58bd791af506
      size: 2897
    - path: cifar100/reports/attack/default/score_dict.json
      md5: 9a5c2618452da4ccadea22e30a78086e
      size: 1167
    - path: models.sh
      md5: 246aa450e3718a75e46629425b71430e
      size: 1561
    outs:
    - path: cifar100/reports/attack/ResNet50.db
      md5: 661c574512c9999bc0129e7862370ebd
      size: 4579328
  compile@attack:
    cmd: python -m deckard.layers.compile --report_folder cifar100/reports/attack
      --results_file cifar100/reports/attack.csv
    deps:
    - path: cifar100/reports/attack/
      md5: a34fe5a605278a557eca2c3c7abad5ea.dir
      size: 156648955302
      nfiles: 35764
    - path: cifar100/reports/attack/ResNet101.db
      md5: 745096cb28b8fedbe3188438e007bf83
      size: 3297280
    - path: cifar100/reports/attack/ResNet152.db
      md5: 13bfc0a3afe3cea00eea5155b114fb88
      size: 2162688
    - path: cifar100/reports/attack/ResNet18.db
      md5: 4799036df0e9a004b40a426502085fdc
      size: 7032832
    - path: cifar100/reports/attack/ResNet34.db
      md5: 6ab0bb1c2f12d4cc3a6af6ec31c20df6
      size: 3317760
    - path: cifar100/reports/attack/ResNet50.db
      md5: 661c574512c9999bc0129e7862370ebd
      size: 4579328
    outs:
    - path: cifar100/reports/attack.csv
      md5: e1e1b67a591afdb5c9ea8f35003e5394
      size: 36167864
  clean@attack:
    cmd: python -m deckard.layers.clean_data -i cifar100/reports/attack.csv -o cifar100/reports/clean_attack.csv
      -c conf/clean.yaml
    deps:
    - path: cifar100/reports/attack.csv
      md5: e1e1b67a591afdb5c9ea8f35003e5394
      size: 36167864
    params:
      params.yaml:
        files.directory: cifar100
        files.reports: reports
      conf/clean.yaml:
        attacks:
          DeepFool: Deep
          FastGradientMethod: FGM
          HopSkipJump: HSJ
          PixelAttack: Pixel
          ProjectedGradientDescent: PGD
          ThresholdAttack: Thresh
        defences:
          Control: Control
          FeatureSqueezing: FSQ
          GaussianAugmentation: Gauss-in
          GaussianNoise: Gauss-out
          HighConfidence: Conf
          Epochs: Epochs
          model_layers: Control
        fillna:
          Epochs: 10
        params:
          Deep: attack.init.nb_grads
          FGM: attack.init.eps
          HSJ: attack.init.max_iter
          Pixel: attack.init.th
          PGD: attack.init.eps
          Thresh: attack.init.th
          Gauss-out: model.art.postprocessor.params.scale
          Conf: model.art.postprocessor.params.cutoff
          FSQ: model.art.preprocessor.params.bit_depth
          Gauss-in: model.art.preprocessor.params.sigma
          Control: model_layers
          Epochs: model.trainer.nb_epoch
          control:
            model_layers: 18
          defaults:
            Epochs: 1
    outs:
    - path: cifar100/reports/clean_attack.csv
      md5: 9d1154f761ad54e67396583844a4dbf9
      size: 20934182
  plot:
    cmd: python -m deckard.layers.plots --path cifar100/plots/ --file cifar100/reports/clean_attack.csv
      -c conf/plots.yaml
    deps:
    - path: cifar100/reports/clean_attack.csv
      md5: 9d1154f761ad54e67396583844a4dbf9
      size: 20934182
    params:
      params.yaml:
        files.directory: cifar100
        files.reports: reports
      conf/plots.yaml:
        cat_plot:
        - file: adv_accuracy_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          set:
            yscale: linear
          titles: Adv. Accuracy vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: adv_accuracy
          ylabels: Adv. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: ben_accuracy_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          titles: Ben. Accuracy vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: accuracy
          ylabels: Ben. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: ben_failures_per_train_time_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          set:
            yscale: log
          titles: $\bar{C}_{ben.}$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: training_time_per_failure
          ylabels: $\bar{C}_{ben.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_failures_per_train_time_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          set:
            yscale: log
          titles: $\bar{C}_{adv.}$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: training_time_per_adv_failure
          ylabels: $\bar{C}_{adv.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_failures_per_train_time_vs_attack_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          set:
            yscale: log
          titles: $\bar{C}_{adv.}$ vs Attack Type
          x: atk_gen
          xlabels: Attack Type
          y: training_time_per_adv_failure
          ylabels: $\bar{C}_{adv.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_failures_per_test_time_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          titles: $h_{adv}$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: adv_failure_rate
          ylabels: $h_{adv.}$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_accuracy_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          titles: Adv. Accuracy vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: adv_accuracy
          ylabels: Adv. Ben. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: adv_accuracy_vs_attack_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          titles: Adv. Accuracy vs Attack Type
          x: atk_gen
          xlabels: Attack Type
          y: adv_accuracy
          ylabels: Adv. Accuracy
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        - file: ben_failure_rate_vs_defence_type.pdf
          hue: model_name
          kind: boxen
          legend_title: Model Name
          set:
            yscale: log
          titles: $h_{ben}(t; \theta)$ vs Defence Type
          x: def_gen
          xlabels: Defence Type
          y: failure_rate
          ylabels: $h_{ben}(t; \theta)$
          rotation: 90
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
        line_plot:
        - file: def_param_vs_accuracy.pdf
          hue: def_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
            title: Defence
          title: Ben. Accuracy vs Defence Strength
          x: def_value
          x_scale: linear
          xlabel: Defence Control Parameter
          y: accuracy
          y_scale:
          ylabel: Ben. Accuracy
          hue_order:
          - Control
          - Epochs
          - Conf
          - Gauss-in
          - Gauss-out
          - Conf
          - FSQ
        - file: def_param_vs_adv_accuracy.pdf
          hue: def_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
            title: Defence
          title: Adv. Accuracy vs Defence Strength
          x: def_value
          x_scale: linear
          xlabel: Defence Control Parameter
          y: adv_accuracy
          y_scale:
          ylabel: Adv. Accuracy
          hue_order:
          - Control
          - Epochs
          - Conf
          - Gauss-in
          - Gauss-out
          - Conf
          - FSQ
        - file: def_param_vs_adv_failure_rate.pdf
          hue: def_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
            title: Defence
          title: $h_{adv}$ vs Defence Strength
          x: def_value
          x_scale: linear
          xlabel: Defence Control Parameter
          y: adv_failure_rate
          y_scale: log
          ylabel: $h_{adv.}$
          hue_order:
          - Control
          - Epochs
          - Conf
          - Gauss-in
          - Gauss-out
          - Conf
          - FSQ
        - file: atk_param_vs_accuracy.pdf
          hue: atk_gen
          legend:
            bbox_to_anchor:
            - 1.05
            - 1
          title: Adv. Accuracy vs Attack Strength
          x: atk_value
          x_scale: linear
          xlabel: Attack Control Parameter
          y: adv_accuracy
          y_scale:
          ylabel: Adv. Accuracy
          hue_order:
          - FGM
          - PGD
          - Deep
          - HSJ
          - Pixel
          - Thresh
        scatter_plot:
        - x: train_time_per_sample
          y: adv_failure_rate
          hue: model_name
          xlabel: $t_{train}$
          ylabel: $h_{adv}$
          title: $h_{adv}$ vs $t_{train}$
          file: adv_failure_rate_vs_train_time.pdf
          legend:
            title: Model Name
            bbox_to_anchor:
            - 1.05
            - 1
          hue_order:
          - ResNet18
          - ResNet34
          - ResNet50
          - ResNet101
          - ResNet152
    outs:
    - path: cifar100/plots/adv_accuracy_vs_attack_type.pdf
      md5: d346f3c932e9add6a4e62bdbbf4cfdd6
      size: 23203
    - path: cifar100/plots/adv_accuracy_vs_defence_type.pdf
      md5: 5bbd1686381188d3136521328bf2bcc2
      size: 23922
    - path: cifar100/plots/adv_failure_rate_vs_train_time.pdf
      md5: 0ba377dc67e2e78c9e316561251037bf
      size: 87282
    - path: cifar100/plots/adv_failures_per_test_time_vs_defence_type.pdf
      md5: 99d5bffb55346655a532e655a9d2cc1f
      size: 37552
    - path: cifar100/plots/adv_failures_per_train_time_vs_attack_type.pdf
      md5: 04038a672e33b27c2580f000aa4df6bf
      size: 39190
    - path: cifar100/plots/adv_failures_per_train_time_vs_defence_type.pdf
      md5: 96c43dd72e99791b17ab9c688bc47114
      size: 35201
    - path: cifar100/plots/atk_param_vs_accuracy.pdf
      md5: 24fbda4fda48c120f2815686272f433a
      size: 20755
    - path: cifar100/plots/ben_accuracy_vs_defence_type.pdf
      md5: 34ac9ca0fa2a04c720d647fa3398ba57
      size: 30437
    - path: cifar100/plots/ben_failure_rate_vs_defence_type.pdf
      md5: e9e1a815e5bf2b4e4eb7a67bd85a1b7e
      size: 38827
    - path: cifar100/plots/ben_failures_per_train_time_vs_defence_type.pdf
      md5: 2a5324d8fe88f51f44285e3262140b44
      size: 32397
    - path: cifar100/plots/def_param_vs_accuracy.pdf
      md5: 8230f26423f54ea5f0c7c3eaf7fa3075
      size: 18770
    - path: cifar100/plots/def_param_vs_adv_accuracy.pdf
      md5: f000f672faf06ea7493e712744fc2c0b
      size: 19805
    - path: cifar100/plots/def_param_vs_adv_failure_rate.pdf
      md5: 0ff83abc8a59a2913ae2ed76d3179c69
      size: 22802
  copy_results:
    cmd: cp -r cifar100/plots/* ~/ml_afr/cifar100
    deps:
    - path: cifar100/plots/
      md5: da68d386de552b44457e599365b52be4.dir
      size: 681342
      nfiles: 24
  afr:
    cmd: python -m deckard.layers.afr --dataset cifar100 --data_file cifar100/reports/clean_attack.csv
      --target adv_accuracy --duration_col adv_fit_time --dataset cifar100 --config_file
      conf/afr.yaml --plots_folder cifar100/plots/
    deps:
    - path: cifar100/reports/clean_attack.csv
      md5: 9d1154f761ad54e67396583844a4dbf9
      size: 20934182
    params:
      params.yaml:
        files.directory: cifar100
      conf/afr.yaml:
        covariates:
        - accuracy
        - train_time
        - predict_time
        - atk_value
        - def_value
        - data.sample.random_state
        - model_layers
        - adv_fit_time
        - model.trainer.nb_epoch
        cox:
          plot:
            file: cox_aft.pdf
            title: Cox AFR Model
          labels:
            'Intercept: rho_': $\rho$
            'Intercept: lambda_': $\lambda$
            'data.sample.random_state: lambda_': Random State
            'atk_value: lambda_': Attack Strength
            'train_time: lambda_': $t_{train}$
            'predict_proba_time: lambda_': $t_{predict}$
            'adv_accuracy: lambda_': Adv. Accuracy
            'accuracy: lambda_': Ben. Accuracy
            'adv_fit_time: lambda_': $t_{attack}$
            'adv_failure_rate: lambda_': $h_{adv.}(t;\theta)$
            'failure_rate: lambda_': $h_{ben.}(t;\theta)$
            'model.trainer.nb_epoch: lambda_': No. of Epochs
            'model.trainer.batch_size: lambda_': Batch Size
            def_gen: Defence
          partial_effect:
          - file: cox_epochs_partial_effect.pdf
            covariate_array: model.trainer.nb_epoch
            values_array:
            - 1
            - 10
            - 25
            - 50
            title: $S(t)$ for Cox AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: Epochs
              labels:
              - '1'
              - '10'
              - '25'
              - '50'
          - file: cox_layers_partial_effect.pdf
            covariate_array: model.trainer.nb_epoch
            values_array:
            - 18
            - 34
            - 50
            - 101
            - 152
            title: $S(t)$ for Cox AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: ResNet Layers
              labels:
              - '18'
              - '34'
              - '50'
              - '101'
              - '152'
        log_logistic:
          plot:
            file: log_logistic_aft.pdf
            title: Log logistic AFR Model
          labels:
            'Intercept: rho_': $\rho$
            'Intercept: lambda_': $\lambda$
            'data.sample.random_state: lambda_': Random State
            'atk_value: lambda_': Attack Strength
            'train_time: lambda_': $t_{train}$
            'predict_proba_time: lambda_': $t_{predict}$
            'adv_accuracy: lambda_': Adv. Accuracy
            'accuracy: lambda_': Ben. Accuracy
            'adv_fit_time: lambda_': $t_{attack}$
            'adv_failure_rate: lambda_': $h_{adv.}(t;\theta)$
            'failure_rate: lambda_': $h_{ben.}(t;\theta)$
            'model.trainer.nb_epoch: lambda_': No. of Epochs
            'model.trainer.batch_size: lambda_': Batch Size
            def_gen: Defence
          partial_effect:
          - file: log_logistic_epochs_partial_effect.pdf
            covariate_array: model.trainer.nb_epoch
            values_array:
            - 1
            - 10
            - 25
            - 50
            title: $S(t)$ for Log-Logistic AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: Epochs
              labels:
              - '1'
              - '10'
              - '25'
              - '50'
        log_normal:
          plot:
            file: log_normal_aft.pdf
            title: Log Normal AFR Model
          labels:
            'Intercept: rho_': $\rho$
            'Intercept: lambda_': $\lambda$
            'data.sample.random_state: lambda_': Random State
            'atk_value: lambda_': Attack Strength
            'train_time: lambda_': $t_{train}$
            'predict_proba_time: lambda_': $t_{predict}$
            'adv_accuracy: lambda_': Adv. Accuracy
            'accuracy: lambda_': Ben. Accuracy
            'adv_fit_time: lambda_': $t_{attack}$
            'adv_failure_rate: lambda_': $h_{adv.}(t;\theta)$
            'failure_rate: lambda_': $h_{ben.}(t;\theta)$
            'model.trainer.nb_epoch: lambda_': No. of Epochs
            'model.trainer.batch_size: lambda_': Batch Size
            def_gen: Defence
          partial_effect:
          - file: log_normal_epochs_partial_effect.pdf
            covariate_array: model.trainer.nb_epoch
            values_array:
            - 1
            - 10
            - 25
            - 50
            title: $S(t)$ for Log-Normal AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: Epochs
              labels:
              - '1'
              - '10'
              - '25'
              - '50'
        weibull:
          plot:
            file: weibull_aft.pdf
            title: Weibull AFR Model
          labels:
            'Intercept: rho_': $\rho$
            'Intercept: lambda_': $\lambda$
            'data.sample.random_state: lambda_': Random State
            'atk_value: lambda_': Attack Strength
            'train_time: lambda_': $t_{train}$
            'predict_proba_time: lambda_': $t_{predict}$
            'adv_accuracy: lambda_': Adv. Accuracy
            'accuracy: lambda_': Ben. Accuracy
            'adv_fit_time: lambda_': $t_{attack}$
            'adv_failure_rate: lambda_': $h_{adv.}(t;\theta)$
            'failure_rate: lambda_': $h_{ben.}(t;\theta)$
            'model.trainer.nb_epoch: lambda_': No. of Epochs
            'model.trainer.batch_size: lambda_': Batch Size
            def_gen: Defence
          partial_effect:
          - file: weibull_epochs_partial_effect.pdf
            covariate_array: model.trainer.nb_epoch
            values_array:
            - 1
            - 10
            - 25
            - 50
            title: $S(t)$ for Weibull AFR
            ylabel: Expectation of $S(t)$
            xlabel: Time $T$ (seconds)
            legend_kwargs:
              title: Epochs
              labels:
              - '1'
              - '10'
              - '25'
              - '50'
    outs:
    - path: cifar100/plots/aft_comparison.csv
      md5: 90eb0ce0f18da5f816ad1e4297c614e9
      size: 411
    - path: cifar100/plots/aft_comparison.tex
      md5: 210ddeb87d4f250c8926c4c69428823d
      size: 705
    - path: cifar100/plots/cox_aft.pdf
      md5: 83a610de1806ac690a9a8348e5eee987
      size: 20261
    - path: cifar100/plots/log_logistic_aft.pdf
      md5: 7153bb381be8007696cd08a2d89e1e47
      size: 22981
    - path: cifar100/plots/weibull_aft.pdf
      md5: 3abacdfdc7b3f5263fd1946d33561064
      size: 29085
  attacks@ResNet101:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet101
      stage=attack ++hydra.sweeper.storage=sqlite:///cifar100/reports/attack/ResNet101.db
      --config-name cifar100.yaml
    deps:
    - path: attacks.sh
      md5: d78e6d6b697480fbccfb58bd791af506
      size: 2897
    - path: cifar100/reports/attack/default/score_dict.json
      md5: 9a5c2618452da4ccadea22e30a78086e
      size: 1167
    - path: models.sh
      md5: 246aa450e3718a75e46629425b71430e
      size: 1561
    outs:
    - path: cifar100/reports/attack/ResNet101.db
      md5: 745096cb28b8fedbe3188438e007bf83
      size: 3297280
